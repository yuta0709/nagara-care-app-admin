/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Nagara Care API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import { customInstance } from './custom-instance';
export interface SignInDto {
  loginId: string;
  password: string;
}

export interface TokenDto {
  /** JWTトークン */
  token: string;
}

export interface UserDto {
  /** ユーザーUID */
  uid: string;
  /** ログインID */
  loginId: string;
  /** 姓 */
  familyName: string;
  /** 名 */
  givenName: string;
  /** 姓（フリガナ） */
  familyNameFurigana: string;
  /** 名（フリガナ） */
  givenNameFurigana: string;
  /** ユーザー権限 */
  role: string;
  /** テナントUID */
  tenantUid: string;
}

/**
 * ロール
 */
export type UserListItemDtoRole = typeof UserListItemDtoRole[keyof typeof UserListItemDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserListItemDtoRole = {
  GLOBAL_ADMIN: 'GLOBAL_ADMIN',
  TENANT_ADMIN: 'TENANT_ADMIN',
  CAREGIVER: 'CAREGIVER',
} as const;

export interface UserListItemDto {
  /** ユーザーUID */
  uid: string;
  /** ログインID */
  loginId: string;
  /** 姓 */
  familyName: string;
  /** 名 */
  givenName: string;
  /** 姓（フリガナ） */
  familyNameFurigana: string;
  /** 名（フリガナ） */
  givenNameFurigana: string;
  /** ロール */
  role: UserListItemDtoRole;
  /** 作成日時 */
  createdAt: string;
}

export interface UserListResponseDto {
  /** ユーザー一覧 */
  items: UserListItemDto[];
  /** 総件数 */
  total: number;
}

export interface TenantUserCreateInputDto {
  /** ログインID */
  loginId: string;
  /** パスワード */
  password: string;
  /** 姓 */
  familyName: string;
  /** 名 */
  givenName: string;
  /** 姓（フリガナ） */
  familyNameFurigana: string;
  /** 名（フリガナ） */
  givenNameFurigana: string;
  /** ユーザー権限 */
  role: string;
}

/**
 * ユーザーロール
 */
export type UserUpdateInputDtoRole = typeof UserUpdateInputDtoRole[keyof typeof UserUpdateInputDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserUpdateInputDtoRole = {
  GLOBAL_ADMIN: 'GLOBAL_ADMIN',
  TENANT_ADMIN: 'TENANT_ADMIN',
  CAREGIVER: 'CAREGIVER',
} as const;

export interface UserUpdateInputDto {
  /** 姓 */
  familyName: string;
  /** 名 */
  givenName: string;
  /** 姓（フリガナ） */
  familyNameFurigana: string;
  /** 名（フリガナ） */
  givenNameFurigana: string;
  /** ユーザーロール */
  role: UserUpdateInputDtoRole;
}

export interface TenantListItemDto {
  /** テナントUID */
  uid: string;
  /** テナント名 */
  name: string;
  /** 作成日時 */
  createdAt: string;
}

export interface TenantListResponseDto {
  /** テナント一覧 */
  items: TenantListItemDto[];
  /** 総件数 */
  total: number;
}

export interface TenantCreateInputDto {
  /** テナント名 */
  name: string;
}

export interface TenantUpdateInputDto {
  /** テナント名 */
  name: string;
}

export interface TenantCreateOutputDto {
  /** テナントID */
  uid: string;
  /** テナント名 */
  name: string;
  /** 作成日時 */
  createdAt: string;
}

/**
 * 性別
 */
export type ResidentDtoGender = typeof ResidentDtoGender[keyof typeof ResidentDtoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResidentDtoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface ResidentDto {
  /** UID */
  uid: string;
  /** テナントUID */
  tenantUid: string;
  /** 姓 */
  familyName: string;
  /** 名 */
  givenName: string;
  /** 姓（フリガナ） */
  familyNameFurigana: string;
  /** 名（フリガナ） */
  givenNameFurigana: string;
  /** 生年月日 */
  dateOfBirth: string;
  /** 性別 */
  gender: ResidentDtoGender;
  /** 入所日 */
  admissionDate: string;
  /** 作成日時 */
  createdAt: string;
}

export interface ResidentListResponseDto {
  items: ResidentDto[];
  /** 総件数 */
  total: number;
}

/**
 * 性別
 */
export type ResidentCreateInputDtoGender = typeof ResidentCreateInputDtoGender[keyof typeof ResidentCreateInputDtoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResidentCreateInputDtoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface ResidentCreateInputDto {
  /** 姓 */
  familyName: string;
  /** 名 */
  givenName: string;
  /** 姓（フリガナ） */
  familyNameFurigana: string;
  /** 名（フリガナ） */
  givenNameFurigana: string;
  /** 生年月日 */
  dateOfBirth: string;
  /** 性別 */
  gender: ResidentCreateInputDtoGender;
  /** 入所日 */
  admissionDate: string;
}

/**
 * 性別
 */
export type ResidentUpdateInputDtoGender = typeof ResidentUpdateInputDtoGender[keyof typeof ResidentUpdateInputDtoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResidentUpdateInputDtoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface ResidentUpdateInputDto {
  /** 姓 */
  familyName: string;
  /** 名 */
  givenName: string;
  /** 姓（フリガナ） */
  familyNameFurigana: string;
  /** 名（フリガナ） */
  givenNameFurigana: string;
  /** 生年月日 */
  dateOfBirth: string;
  /** 性別 */
  gender: ResidentUpdateInputDtoGender;
  /** 入所日 */
  admissionDate: string;
}

/**
 * 食事の時間帯
 */
export type FoodRecordDtoMealTime = typeof FoodRecordDtoMealTime[keyof typeof FoodRecordDtoMealTime];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FoodRecordDtoMealTime = {
  BREAKFAST: 'BREAKFAST',
  LUNCH: 'LUNCH',
  DINNER: 'DINNER',
} as const;

/**
 * 飲み物の種類
 */
export type FoodRecordDtoBeverageType = typeof FoodRecordDtoBeverageType[keyof typeof FoodRecordDtoBeverageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FoodRecordDtoBeverageType = {
  WATER: 'WATER',
  TEA: 'TEA',
  OTHER: 'OTHER',
} as const;

export interface FoodRecordDto {
  /** UID */
  uid: string;
  /** テナントUID */
  tenantUid: string;
  /** 介護者UID */
  caregiverUid: string;
  /** 利用者UID */
  residentUid: string;
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes: string;
  /** 食事の時間帯 */
  mealTime: FoodRecordDtoMealTime;
  /** 主食の摂取率（%） */
  mainCoursePercentage: number;
  /** 副食の摂取率（%） */
  sideDishPercentage: number;
  /** 汁物の摂取率（%） */
  soupPercentage: number;
  /** 飲み物の種類 */
  beverageType: FoodRecordDtoBeverageType;
  /** 飲み物の摂取量（ml） */
  beverageVolume: number;
}

export interface FoodRecordListResponseDto {
  items: FoodRecordDto[];
  /** 総件数 */
  total: number;
}

/**
 * 食事の時間帯
 */
export type FoodRecordCreateInputDtoMealTime = typeof FoodRecordCreateInputDtoMealTime[keyof typeof FoodRecordCreateInputDtoMealTime];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FoodRecordCreateInputDtoMealTime = {
  BREAKFAST: 'BREAKFAST',
  LUNCH: 'LUNCH',
  DINNER: 'DINNER',
} as const;

/**
 * 飲み物の種類
 */
export type FoodRecordCreateInputDtoBeverageType = typeof FoodRecordCreateInputDtoBeverageType[keyof typeof FoodRecordCreateInputDtoBeverageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FoodRecordCreateInputDtoBeverageType = {
  WATER: 'WATER',
  TEA: 'TEA',
  OTHER: 'OTHER',
} as const;

export interface FoodRecordCreateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 食事の時間帯 */
  mealTime: FoodRecordCreateInputDtoMealTime;
  /**
   * 主食の摂取率（%）
   * @minimum 0
   * @maximum 100
   */
  mainCoursePercentage: number;
  /**
   * 副食の摂取率（%）
   * @minimum 0
   * @maximum 100
   */
  sideDishPercentage: number;
  /**
   * 汁物の摂取率（%）
   * @minimum 0
   * @maximum 100
   */
  soupPercentage: number;
  /** 飲み物の種類 */
  beverageType: FoodRecordCreateInputDtoBeverageType;
  /**
   * 飲み物の摂取量（ml）
   * @minimum 0
   */
  beverageVolume: number;
}

/**
 * 食事の時間帯
 */
export type FoodRecordUpdateInputDtoMealTime = typeof FoodRecordUpdateInputDtoMealTime[keyof typeof FoodRecordUpdateInputDtoMealTime];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FoodRecordUpdateInputDtoMealTime = {
  BREAKFAST: 'BREAKFAST',
  LUNCH: 'LUNCH',
  DINNER: 'DINNER',
} as const;

/**
 * 飲み物の種類
 */
export type FoodRecordUpdateInputDtoBeverageType = typeof FoodRecordUpdateInputDtoBeverageType[keyof typeof FoodRecordUpdateInputDtoBeverageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FoodRecordUpdateInputDtoBeverageType = {
  WATER: 'WATER',
  TEA: 'TEA',
  OTHER: 'OTHER',
} as const;

export interface FoodRecordUpdateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 食事の時間帯 */
  mealTime: FoodRecordUpdateInputDtoMealTime;
  /**
   * 主食の摂取率（%）
   * @minimum 0
   * @maximum 100
   */
  mainCoursePercentage: number;
  /**
   * 副食の摂取率（%）
   * @minimum 0
   * @maximum 100
   */
  sideDishPercentage: number;
  /**
   * 汁物の摂取率（%）
   * @minimum 0
   * @maximum 100
   */
  soupPercentage: number;
  /** 飲み物の種類 */
  beverageType: FoodRecordUpdateInputDtoBeverageType;
  /**
   * 飲み物の摂取量（ml）
   * @minimum 0
   */
  beverageVolume: number;
}

export interface BathRecordDto {
  /** UID */
  uid: string;
  /** テナントUID */
  tenantUid: string;
  /** 介護者UID */
  caregiverUid: string;
  /** 利用者UID */
  residentUid: string;
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes: string;
  /** 入浴方法 */
  bathMethod: string;
}

export interface BathRecordListResponseDto {
  items: BathRecordDto[];
  /** 総件数 */
  total: number;
}

export interface BathRecordCreateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 入浴方法 */
  bathMethod: string;
}

export interface BathRecordUpdateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 入浴方法 */
  bathMethod: string;
}

export interface EliminationRecordDto {
  /** UID */
  uid: string;
  /** テナントUID */
  tenantUid: string;
  /** 介護者UID */
  caregiverUid: string;
  /** 利用者UID */
  residentUid: string;
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes: string;
  /** 排泄方法 */
  eliminationMethod: string;
  /** 便の有無 */
  hasFeces: boolean;
  /** 便失禁の有無 */
  fecalIncontinence: boolean;
  /** 便の性状 */
  fecesAppearance: string;
  /** 便の量（g） */
  fecesVolume: number;
  /** 尿の有無 */
  hasUrine: boolean;
  /** 尿失禁の有無 */
  urinaryIncontinence: boolean;
  /** 尿の性状 */
  urineAppearance: string;
  /** 尿量（ml） */
  urineVolume: number;
}

export interface EliminationRecordListResponseDto {
  items: EliminationRecordDto[];
  /** 総件数 */
  total: number;
}

export interface EliminationRecordCreateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 排泄方法 */
  eliminationMethod: string;
  /** 便の有無 */
  hasFeces: boolean;
  /** 便失禁の有無 */
  fecalIncontinence?: boolean;
  /** 便の性状 */
  fecesAppearance?: string;
  /**
   * 便の量（g）
   * @minimum 0
   */
  fecesVolume?: number;
  /** 尿の有無 */
  hasUrine: boolean;
  /** 尿失禁の有無 */
  urinaryIncontinence?: boolean;
  /** 尿の性状 */
  urineAppearance?: string;
  /**
   * 尿量（ml）
   * @minimum 0
   */
  urineVolume?: number;
}

export interface EliminationRecordUpdateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 排泄方法 */
  eliminationMethod: string;
  /** 便の有無 */
  hasFeces: boolean;
  /** 便失禁の有無 */
  fecalIncontinence?: boolean;
  /** 便の性状 */
  fecesAppearance?: string;
  /**
   * 便の量（g）
   * @minimum 0
   */
  fecesVolume?: number;
  /** 尿の有無 */
  hasUrine: boolean;
  /** 尿失禁の有無 */
  urinaryIncontinence?: boolean;
  /** 尿の性状 */
  urineAppearance?: string;
  /**
   * 尿量（ml）
   * @minimum 0
   */
  urineVolume?: number;
}

/**
 * 日常の状態
 */
export type DailyRecordDtoDailyStatus = typeof DailyRecordDtoDailyStatus[keyof typeof DailyRecordDtoDailyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DailyRecordDtoDailyStatus = {
  NORMAL: 'NORMAL',
  WARNING: 'WARNING',
  ALERT: 'ALERT',
} as const;

export interface DailyRecordDto {
  /** UID */
  uid: string;
  /** テナントUID */
  tenantUid: string;
  /** 介護者UID */
  caregiverUid: string;
  /** 利用者UID */
  residentUid: string;
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes: string;
  /** 日常の状態 */
  dailyStatus: DailyRecordDtoDailyStatus;
}

export interface DailyRecordListResponseDto {
  items: DailyRecordDto[];
  /** 総件数 */
  total: number;
}

/**
 * 日常の状態
 */
export type DailyRecordCreateInputDtoDailyStatus = typeof DailyRecordCreateInputDtoDailyStatus[keyof typeof DailyRecordCreateInputDtoDailyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DailyRecordCreateInputDtoDailyStatus = {
  NORMAL: 'NORMAL',
  WARNING: 'WARNING',
  ALERT: 'ALERT',
} as const;

export interface DailyRecordCreateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 日常の状態 */
  dailyStatus?: DailyRecordCreateInputDtoDailyStatus;
}

/**
 * 日常の状態
 */
export type DailyRecordUpdateInputDtoDailyStatus = typeof DailyRecordUpdateInputDtoDailyStatus[keyof typeof DailyRecordUpdateInputDtoDailyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DailyRecordUpdateInputDtoDailyStatus = {
  NORMAL: 'NORMAL',
  WARNING: 'WARNING',
  ALERT: 'ALERT',
} as const;

export interface DailyRecordUpdateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 日常の状態 */
  dailyStatus?: DailyRecordUpdateInputDtoDailyStatus;
}

/**
 * 飲み物の種類
 */
export type BeverageRecordDtoBeverageType = typeof BeverageRecordDtoBeverageType[keyof typeof BeverageRecordDtoBeverageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BeverageRecordDtoBeverageType = {
  WATER: 'WATER',
  TEA: 'TEA',
  OTHER: 'OTHER',
} as const;

export interface BeverageRecordDto {
  /** UID */
  uid: string;
  /** テナントUID */
  tenantUid: string;
  /** 介護者UID */
  caregiverUid: string;
  /** 利用者UID */
  residentUid: string;
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes: string;
  /** 飲み物の種類 */
  beverageType: BeverageRecordDtoBeverageType;
  /** 飲み物の量（ml） */
  volume: number;
}

export interface BeverageRecordListResponseDto {
  items: BeverageRecordDto[];
  /** 総件数 */
  total: number;
}

/**
 * 飲み物の種類
 */
export type BeverageRecordCreateInputDtoBeverageType = typeof BeverageRecordCreateInputDtoBeverageType[keyof typeof BeverageRecordCreateInputDtoBeverageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BeverageRecordCreateInputDtoBeverageType = {
  WATER: 'WATER',
  TEA: 'TEA',
  OTHER: 'OTHER',
} as const;

export interface BeverageRecordCreateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 飲み物の種類 */
  beverageType: BeverageRecordCreateInputDtoBeverageType;
  /**
   * 飲み物の量（ml）
   * @minimum 0
   */
  volume: number;
}

/**
 * 飲み物の種類
 */
export type BeverageRecordUpdateInputDtoBeverageType = typeof BeverageRecordUpdateInputDtoBeverageType[keyof typeof BeverageRecordUpdateInputDtoBeverageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BeverageRecordUpdateInputDtoBeverageType = {
  WATER: 'WATER',
  TEA: 'TEA',
  OTHER: 'OTHER',
} as const;

export interface BeverageRecordUpdateInputDto {
  /** 記録時刻 */
  recordedAt: string;
  /** メモ */
  notes?: string;
  /** 飲み物の種類 */
  beverageType: BeverageRecordUpdateInputDtoBeverageType;
  /**
   * 飲み物の量（ml）
   * @minimum 0
   */
  volume: number;
}





export const appControllerGetHello = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getAppControllerGetHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = unknown


export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ログイン
 */
export const authControllerSignIn = (
    signInDto: SignInDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<TokenDto>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInDto, signal
    },
      );
    }
  


export const getAuthControllerSignInMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerSignIn>>, TError,{data: SignInDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerSignIn>>, TError,{data: SignInDto}, TContext> => {
    
const mutationKey = ['authControllerSignIn'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerSignIn>>, {data: SignInDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerSignIn(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerSignInMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerSignIn>>>
    export type AuthControllerSignInMutationBody = SignInDto
    export type AuthControllerSignInMutationError = unknown

    /**
 * @summary ログイン
 */
export const useAuthControllerSignIn = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerSignIn>>, TError,{data: SignInDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerSignIn>>,
        TError,
        {data: SignInDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerSignInMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ログイン中のユーザー情報を取得
 */
export const authControllerGetProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<UserDto>(
      {url: `/auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getAuthControllerGetProfileQueryKey = () => {
    return [`/auth/me`] as const;
    }

    
export const getAuthControllerGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthControllerGetProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetProfile>>> = ({ signal }) => authControllerGetProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthControllerGetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerGetProfile>>>
export type AuthControllerGetProfileQueryError = unknown


export function useAuthControllerGetProfile<TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetProfile>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthControllerGetProfile<TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetProfile>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthControllerGetProfile<TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ログイン中のユーザー情報を取得
 */

export function useAuthControllerGetProfile<TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthControllerGetProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary テナント内のユーザー一覧を取得
 */
export const usersControllerFindByTenant = (
    tenantUid?: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<UserListResponseDto>(
      {url: `/tenants/${tenantUid}/users`, method: 'GET', signal
    },
      );
    }
  

export const getUsersControllerFindByTenantQueryKey = (tenantUid?: string,) => {
    return [`/tenants/${tenantUid}/users`] as const;
    }

    
export const getUsersControllerFindByTenantQueryOptions = <TData = Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError = unknown>(tenantUid?: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerFindByTenantQueryKey(tenantUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindByTenant>>> = ({ signal }) => usersControllerFindByTenant(tenantUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tenantUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersControllerFindByTenantQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerFindByTenant>>>
export type UsersControllerFindByTenantQueryError = unknown


export function useUsersControllerFindByTenant<TData = Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError = unknown>(
 tenantUid: undefined |  string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerFindByTenant>>,
          TError,
          Awaited<ReturnType<typeof usersControllerFindByTenant>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersControllerFindByTenant<TData = Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError = unknown>(
 tenantUid?: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerFindByTenant>>,
          TError,
          Awaited<ReturnType<typeof usersControllerFindByTenant>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersControllerFindByTenant<TData = Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError = unknown>(
 tenantUid?: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary テナント内のユーザー一覧を取得
 */

export function useUsersControllerFindByTenant<TData = Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError = unknown>(
 tenantUid?: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindByTenant>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersControllerFindByTenantQueryOptions(tenantUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary テナントにユーザーを作成
 */
export const usersControllerCreateUser = (
    tenantUid: string,
    tenantUserCreateInputDto: TenantUserCreateInputDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<UserDto>(
      {url: `/tenants/${tenantUid}/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tenantUserCreateInputDto, signal
    },
      );
    }
  


export const getUsersControllerCreateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreateUser>>, TError,{tenantUid: string;data: TenantUserCreateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreateUser>>, TError,{tenantUid: string;data: TenantUserCreateInputDto}, TContext> => {
    
const mutationKey = ['usersControllerCreateUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerCreateUser>>, {tenantUid: string;data: TenantUserCreateInputDto}> = (props) => {
          const {tenantUid,data} = props ?? {};

          return  usersControllerCreateUser(tenantUid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersControllerCreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerCreateUser>>>
    export type UsersControllerCreateUserMutationBody = TenantUserCreateInputDto
    export type UsersControllerCreateUserMutationError = unknown

    /**
 * @summary テナントにユーザーを作成
 */
export const useUsersControllerCreateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreateUser>>, TError,{tenantUid: string;data: TenantUserCreateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof usersControllerCreateUser>>,
        TError,
        {tenantUid: string;data: TenantUserCreateInputDto},
        TContext
      > => {

      const mutationOptions = getUsersControllerCreateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ユーザーを更新
 */
export const usersControllerUpdateUser = (
    uid: string,
    userUpdateInputDto: UserUpdateInputDto,
 ) => {
      
      
      return customInstance<UserDto>(
      {url: `/users/${uid}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userUpdateInputDto
    },
      );
    }
  


export const getUsersControllerUpdateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUser>>, TError,{uid: string;data: UserUpdateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUser>>, TError,{uid: string;data: UserUpdateInputDto}, TContext> => {
    
const mutationKey = ['usersControllerUpdateUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdateUser>>, {uid: string;data: UserUpdateInputDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  usersControllerUpdateUser(uid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersControllerUpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdateUser>>>
    export type UsersControllerUpdateUserMutationBody = UserUpdateInputDto
    export type UsersControllerUpdateUserMutationError = unknown

    /**
 * @summary ユーザーを更新
 */
export const useUsersControllerUpdateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUser>>, TError,{uid: string;data: UserUpdateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof usersControllerUpdateUser>>,
        TError,
        {uid: string;data: UserUpdateInputDto},
        TContext
      > => {

      const mutationOptions = getUsersControllerUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary ユーザーを削除
 */
export const usersControllerDeleteUser = (
    uid: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/users/${uid}`, method: 'DELETE'
    },
      );
    }
  


export const getUsersControllerDeleteUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerDeleteUser>>, TError,{uid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerDeleteUser>>, TError,{uid: string}, TContext> => {
    
const mutationKey = ['usersControllerDeleteUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerDeleteUser>>, {uid: string}> = (props) => {
          const {uid} = props ?? {};

          return  usersControllerDeleteUser(uid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersControllerDeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerDeleteUser>>>
    
    export type UsersControllerDeleteUserMutationError = unknown

    /**
 * @summary ユーザーを削除
 */
export const useUsersControllerDeleteUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerDeleteUser>>, TError,{uid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof usersControllerDeleteUser>>,
        TError,
        {uid: string},
        TContext
      > => {

      const mutationOptions = getUsersControllerDeleteUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary テナント一覧を取得
 */
export const tenantsControllerFindAll = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<TenantListResponseDto>(
      {url: `/tenants`, method: 'GET', signal
    },
      );
    }
  

export const getTenantsControllerFindAllQueryKey = () => {
    return [`/tenants`] as const;
    }

    
export const getTenantsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTenantsControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tenantsControllerFindAll>>> = ({ signal }) => tenantsControllerFindAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TenantsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof tenantsControllerFindAll>>>
export type TenantsControllerFindAllQueryError = unknown


export function useTenantsControllerFindAll<TData = Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tenantsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof tenantsControllerFindAll>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantsControllerFindAll<TData = Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tenantsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof tenantsControllerFindAll>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTenantsControllerFindAll<TData = Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary テナント一覧を取得
 */

export function useTenantsControllerFindAll<TData = Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tenantsControllerFindAll>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTenantsControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary テナントを作成する
 */
export const tenantsControllerCreate = (
    tenantCreateInputDto: TenantCreateInputDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/tenants`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tenantCreateInputDto, signal
    },
      );
    }
  


export const getTenantsControllerCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerCreate>>, TError,{data: TenantCreateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerCreate>>, TError,{data: TenantCreateInputDto}, TContext> => {
    
const mutationKey = ['tenantsControllerCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tenantsControllerCreate>>, {data: TenantCreateInputDto}> = (props) => {
          const {data} = props ?? {};

          return  tenantsControllerCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TenantsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tenantsControllerCreate>>>
    export type TenantsControllerCreateMutationBody = TenantCreateInputDto
    export type TenantsControllerCreateMutationError = unknown

    /**
 * @summary テナントを作成する
 */
export const useTenantsControllerCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerCreate>>, TError,{data: TenantCreateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tenantsControllerCreate>>,
        TError,
        {data: TenantCreateInputDto},
        TContext
      > => {

      const mutationOptions = getTenantsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary テナントを更新
 */
export const tenantsControllerUpdate = (
    uid: string,
    tenantUpdateInputDto: TenantUpdateInputDto,
 ) => {
      
      
      return customInstance<TenantCreateOutputDto>(
      {url: `/tenants/${uid}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: tenantUpdateInputDto
    },
      );
    }
  


export const getTenantsControllerUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerUpdate>>, TError,{uid: string;data: TenantUpdateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerUpdate>>, TError,{uid: string;data: TenantUpdateInputDto}, TContext> => {
    
const mutationKey = ['tenantsControllerUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tenantsControllerUpdate>>, {uid: string;data: TenantUpdateInputDto}> = (props) => {
          const {uid,data} = props ?? {};

          return  tenantsControllerUpdate(uid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TenantsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof tenantsControllerUpdate>>>
    export type TenantsControllerUpdateMutationBody = TenantUpdateInputDto
    export type TenantsControllerUpdateMutationError = unknown

    /**
 * @summary テナントを更新
 */
export const useTenantsControllerUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerUpdate>>, TError,{uid: string;data: TenantUpdateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tenantsControllerUpdate>>,
        TError,
        {uid: string;data: TenantUpdateInputDto},
        TContext
      > => {

      const mutationOptions = getTenantsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary テナントを削除
 */
export const tenantsControllerDelete = (
    uid: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/tenants/${uid}`, method: 'DELETE'
    },
      );
    }
  


export const getTenantsControllerDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerDelete>>, TError,{uid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerDelete>>, TError,{uid: string}, TContext> => {
    
const mutationKey = ['tenantsControllerDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tenantsControllerDelete>>, {uid: string}> = (props) => {
          const {uid} = props ?? {};

          return  tenantsControllerDelete(uid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TenantsControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof tenantsControllerDelete>>>
    
    export type TenantsControllerDeleteMutationError = unknown

    /**
 * @summary テナントを削除
 */
export const useTenantsControllerDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tenantsControllerDelete>>, TError,{uid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tenantsControllerDelete>>,
        TError,
        {uid: string},
        TContext
      > => {

      const mutationOptions = getTenantsControllerDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary テナント内の利用者一覧を取得
 */
export const residentsControllerFindByTenant = (
    tenantUid?: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResidentListResponseDto>(
      {url: `/tenants/${tenantUid}/residents`, method: 'GET', signal
    },
      );
    }
  

export const getResidentsControllerFindByTenantQueryKey = (tenantUid?: string,) => {
    return [`/tenants/${tenantUid}/residents`] as const;
    }

    
export const getResidentsControllerFindByTenantQueryOptions = <TData = Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError = unknown>(tenantUid?: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getResidentsControllerFindByTenantQueryKey(tenantUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof residentsControllerFindByTenant>>> = ({ signal }) => residentsControllerFindByTenant(tenantUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tenantUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ResidentsControllerFindByTenantQueryResult = NonNullable<Awaited<ReturnType<typeof residentsControllerFindByTenant>>>
export type ResidentsControllerFindByTenantQueryError = unknown


export function useResidentsControllerFindByTenant<TData = Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError = unknown>(
 tenantUid: undefined |  string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof residentsControllerFindByTenant>>,
          TError,
          Awaited<ReturnType<typeof residentsControllerFindByTenant>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useResidentsControllerFindByTenant<TData = Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError = unknown>(
 tenantUid?: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof residentsControllerFindByTenant>>,
          TError,
          Awaited<ReturnType<typeof residentsControllerFindByTenant>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useResidentsControllerFindByTenant<TData = Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError = unknown>(
 tenantUid?: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary テナント内の利用者一覧を取得
 */

export function useResidentsControllerFindByTenant<TData = Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError = unknown>(
 tenantUid?: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindByTenant>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getResidentsControllerFindByTenantQueryOptions(tenantUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary テナントに利用者を作成
 */
export const residentsControllerCreateResident = (
    tenantUid: string,
    residentCreateInputDto: ResidentCreateInputDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResidentDto>(
      {url: `/tenants/${tenantUid}/residents`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: residentCreateInputDto, signal
    },
      );
    }
  


export const getResidentsControllerCreateResidentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof residentsControllerCreateResident>>, TError,{tenantUid: string;data: ResidentCreateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof residentsControllerCreateResident>>, TError,{tenantUid: string;data: ResidentCreateInputDto}, TContext> => {
    
const mutationKey = ['residentsControllerCreateResident'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof residentsControllerCreateResident>>, {tenantUid: string;data: ResidentCreateInputDto}> = (props) => {
          const {tenantUid,data} = props ?? {};

          return  residentsControllerCreateResident(tenantUid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResidentsControllerCreateResidentMutationResult = NonNullable<Awaited<ReturnType<typeof residentsControllerCreateResident>>>
    export type ResidentsControllerCreateResidentMutationBody = ResidentCreateInputDto
    export type ResidentsControllerCreateResidentMutationError = unknown

    /**
 * @summary テナントに利用者を作成
 */
export const useResidentsControllerCreateResident = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof residentsControllerCreateResident>>, TError,{tenantUid: string;data: ResidentCreateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof residentsControllerCreateResident>>,
        TError,
        {tenantUid: string;data: ResidentCreateInputDto},
        TContext
      > => {

      const mutationOptions = getResidentsControllerCreateResidentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 利用者を更新
 */
export const residentsControllerUpdateResident = (
    tenantUid: string,
    uid: string,
    residentUpdateInputDto: ResidentUpdateInputDto,
 ) => {
      
      
      return customInstance<ResidentDto>(
      {url: `/tenants/${tenantUid}/residents/${uid}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: residentUpdateInputDto
    },
      );
    }
  


export const getResidentsControllerUpdateResidentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof residentsControllerUpdateResident>>, TError,{tenantUid: string;uid: string;data: ResidentUpdateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof residentsControllerUpdateResident>>, TError,{tenantUid: string;uid: string;data: ResidentUpdateInputDto}, TContext> => {
    
const mutationKey = ['residentsControllerUpdateResident'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof residentsControllerUpdateResident>>, {tenantUid: string;uid: string;data: ResidentUpdateInputDto}> = (props) => {
          const {tenantUid,uid,data} = props ?? {};

          return  residentsControllerUpdateResident(tenantUid,uid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResidentsControllerUpdateResidentMutationResult = NonNullable<Awaited<ReturnType<typeof residentsControllerUpdateResident>>>
    export type ResidentsControllerUpdateResidentMutationBody = ResidentUpdateInputDto
    export type ResidentsControllerUpdateResidentMutationError = unknown

    /**
 * @summary 利用者を更新
 */
export const useResidentsControllerUpdateResident = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof residentsControllerUpdateResident>>, TError,{tenantUid: string;uid: string;data: ResidentUpdateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof residentsControllerUpdateResident>>,
        TError,
        {tenantUid: string;uid: string;data: ResidentUpdateInputDto},
        TContext
      > => {

      const mutationOptions = getResidentsControllerUpdateResidentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 利用者を削除
 */
export const residentsControllerDeleteResident = (
    tenantUid: string,
    uid: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/tenants/${tenantUid}/residents/${uid}`, method: 'DELETE'
    },
      );
    }
  


export const getResidentsControllerDeleteResidentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof residentsControllerDeleteResident>>, TError,{tenantUid: string;uid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof residentsControllerDeleteResident>>, TError,{tenantUid: string;uid: string}, TContext> => {
    
const mutationKey = ['residentsControllerDeleteResident'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof residentsControllerDeleteResident>>, {tenantUid: string;uid: string}> = (props) => {
          const {tenantUid,uid} = props ?? {};

          return  residentsControllerDeleteResident(tenantUid,uid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResidentsControllerDeleteResidentMutationResult = NonNullable<Awaited<ReturnType<typeof residentsControllerDeleteResident>>>
    
    export type ResidentsControllerDeleteResidentMutationError = unknown

    /**
 * @summary 利用者を削除
 */
export const useResidentsControllerDeleteResident = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof residentsControllerDeleteResident>>, TError,{tenantUid: string;uid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof residentsControllerDeleteResident>>,
        TError,
        {tenantUid: string;uid: string},
        TContext
      > => {

      const mutationOptions = getResidentsControllerDeleteResidentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 利用者の詳細を取得
 */
export const residentsControllerFindOne = (
    tenantUid: string,
    uid: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResidentDto>(
      {url: `/tenants/${tenantUid}/residents/${uid}`, method: 'GET', signal
    },
      );
    }
  

export const getResidentsControllerFindOneQueryKey = (tenantUid: string,
    uid: string,) => {
    return [`/tenants/${tenantUid}/residents/${uid}`] as const;
    }

    
export const getResidentsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof residentsControllerFindOne>>, TError = unknown>(tenantUid: string,
    uid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindOne>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getResidentsControllerFindOneQueryKey(tenantUid,uid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof residentsControllerFindOne>>> = ({ signal }) => residentsControllerFindOne(tenantUid,uid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tenantUid && uid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ResidentsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof residentsControllerFindOne>>>
export type ResidentsControllerFindOneQueryError = unknown


export function useResidentsControllerFindOne<TData = Awaited<ReturnType<typeof residentsControllerFindOne>>, TError = unknown>(
 tenantUid: string,
    uid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof residentsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof residentsControllerFindOne>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useResidentsControllerFindOne<TData = Awaited<ReturnType<typeof residentsControllerFindOne>>, TError = unknown>(
 tenantUid: string,
    uid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof residentsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof residentsControllerFindOne>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useResidentsControllerFindOne<TData = Awaited<ReturnType<typeof residentsControllerFindOne>>, TError = unknown>(
 tenantUid: string,
    uid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindOne>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 利用者の詳細を取得
 */

export function useResidentsControllerFindOne<TData = Awaited<ReturnType<typeof residentsControllerFindOne>>, TError = unknown>(
 tenantUid: string,
    uid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof residentsControllerFindOne>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getResidentsControllerFindOneQueryOptions(tenantUid,uid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary 利用者の食事記録一覧を取得
 */
export const foodRecordsControllerFindByResident = (
    residentUid: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<FoodRecordListResponseDto>(
      {url: `/residents/${residentUid}/food-records`, method: 'GET', signal
    },
      );
    }
  

export const getFoodRecordsControllerFindByResidentQueryKey = (residentUid: string,) => {
    return [`/residents/${residentUid}/food-records`] as const;
    }

    
export const getFoodRecordsControllerFindByResidentQueryOptions = <TData = Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError = unknown>(residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFoodRecordsControllerFindByResidentQueryKey(residentUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>> = ({ signal }) => foodRecordsControllerFindByResident(residentUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(residentUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FoodRecordsControllerFindByResidentQueryResult = NonNullable<Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>>
export type FoodRecordsControllerFindByResidentQueryError = unknown


export function useFoodRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFoodRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFoodRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 利用者の食事記録一覧を取得
 */

export function useFoodRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof foodRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFoodRecordsControllerFindByResidentQueryOptions(residentUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary 食事記録を作成
 */
export const foodRecordsControllerCreate = (
    residentUid: string,
    foodRecordCreateInputDto: FoodRecordCreateInputDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<FoodRecordDto>(
      {url: `/residents/${residentUid}/food-records`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: foodRecordCreateInputDto, signal
    },
      );
    }
  


export const getFoodRecordsControllerCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerCreate>>, TError,{residentUid: string;data: FoodRecordCreateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerCreate>>, TError,{residentUid: string;data: FoodRecordCreateInputDto}, TContext> => {
    
const mutationKey = ['foodRecordsControllerCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof foodRecordsControllerCreate>>, {residentUid: string;data: FoodRecordCreateInputDto}> = (props) => {
          const {residentUid,data} = props ?? {};

          return  foodRecordsControllerCreate(residentUid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FoodRecordsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof foodRecordsControllerCreate>>>
    export type FoodRecordsControllerCreateMutationBody = FoodRecordCreateInputDto
    export type FoodRecordsControllerCreateMutationError = unknown

    /**
 * @summary 食事記録を作成
 */
export const useFoodRecordsControllerCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerCreate>>, TError,{residentUid: string;data: FoodRecordCreateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof foodRecordsControllerCreate>>,
        TError,
        {residentUid: string;data: FoodRecordCreateInputDto},
        TContext
      > => {

      const mutationOptions = getFoodRecordsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 食事記録を更新
 */
export const foodRecordsControllerUpdate = (
    residentUid: unknown,
    uid: string,
    foodRecordUpdateInputDto: FoodRecordUpdateInputDto,
 ) => {
      
      
      return customInstance<FoodRecordDto>(
      {url: `/residents/${residentUid}/food-records/${uid}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: foodRecordUpdateInputDto
    },
      );
    }
  


export const getFoodRecordsControllerUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: FoodRecordUpdateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: FoodRecordUpdateInputDto}, TContext> => {
    
const mutationKey = ['foodRecordsControllerUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof foodRecordsControllerUpdate>>, {residentUid: unknown;uid: string;data: FoodRecordUpdateInputDto}> = (props) => {
          const {residentUid,uid,data} = props ?? {};

          return  foodRecordsControllerUpdate(residentUid,uid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FoodRecordsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof foodRecordsControllerUpdate>>>
    export type FoodRecordsControllerUpdateMutationBody = FoodRecordUpdateInputDto
    export type FoodRecordsControllerUpdateMutationError = unknown

    /**
 * @summary 食事記録を更新
 */
export const useFoodRecordsControllerUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: FoodRecordUpdateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof foodRecordsControllerUpdate>>,
        TError,
        {residentUid: unknown;uid: string;data: FoodRecordUpdateInputDto},
        TContext
      > => {

      const mutationOptions = getFoodRecordsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 食事記録を削除
 */
export const foodRecordsControllerDelete = (
    residentUid: unknown,
    uid: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/residents/${residentUid}/food-records/${uid}`, method: 'DELETE'
    },
      );
    }
  


export const getFoodRecordsControllerDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext> => {
    
const mutationKey = ['foodRecordsControllerDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof foodRecordsControllerDelete>>, {residentUid: unknown;uid: string}> = (props) => {
          const {residentUid,uid} = props ?? {};

          return  foodRecordsControllerDelete(residentUid,uid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FoodRecordsControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof foodRecordsControllerDelete>>>
    
    export type FoodRecordsControllerDeleteMutationError = unknown

    /**
 * @summary 食事記録を削除
 */
export const useFoodRecordsControllerDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof foodRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof foodRecordsControllerDelete>>,
        TError,
        {residentUid: unknown;uid: string},
        TContext
      > => {

      const mutationOptions = getFoodRecordsControllerDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 利用者の入浴記録一覧を取得
 */
export const bathRecordsControllerFindByResident = (
    residentUid: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<BathRecordListResponseDto>(
      {url: `/residents/${residentUid}/bath-records`, method: 'GET', signal
    },
      );
    }
  

export const getBathRecordsControllerFindByResidentQueryKey = (residentUid: string,) => {
    return [`/residents/${residentUid}/bath-records`] as const;
    }

    
export const getBathRecordsControllerFindByResidentQueryOptions = <TData = Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError = unknown>(residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBathRecordsControllerFindByResidentQueryKey(residentUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>> = ({ signal }) => bathRecordsControllerFindByResident(residentUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(residentUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BathRecordsControllerFindByResidentQueryResult = NonNullable<Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>>
export type BathRecordsControllerFindByResidentQueryError = unknown


export function useBathRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBathRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBathRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 利用者の入浴記録一覧を取得
 */

export function useBathRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bathRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBathRecordsControllerFindByResidentQueryOptions(residentUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary 入浴記録を作成
 */
export const bathRecordsControllerCreate = (
    residentUid: string,
    bathRecordCreateInputDto: BathRecordCreateInputDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<BathRecordDto>(
      {url: `/residents/${residentUid}/bath-records`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bathRecordCreateInputDto, signal
    },
      );
    }
  


export const getBathRecordsControllerCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerCreate>>, TError,{residentUid: string;data: BathRecordCreateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerCreate>>, TError,{residentUid: string;data: BathRecordCreateInputDto}, TContext> => {
    
const mutationKey = ['bathRecordsControllerCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bathRecordsControllerCreate>>, {residentUid: string;data: BathRecordCreateInputDto}> = (props) => {
          const {residentUid,data} = props ?? {};

          return  bathRecordsControllerCreate(residentUid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BathRecordsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof bathRecordsControllerCreate>>>
    export type BathRecordsControllerCreateMutationBody = BathRecordCreateInputDto
    export type BathRecordsControllerCreateMutationError = unknown

    /**
 * @summary 入浴記録を作成
 */
export const useBathRecordsControllerCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerCreate>>, TError,{residentUid: string;data: BathRecordCreateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof bathRecordsControllerCreate>>,
        TError,
        {residentUid: string;data: BathRecordCreateInputDto},
        TContext
      > => {

      const mutationOptions = getBathRecordsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 入浴記録を更新
 */
export const bathRecordsControllerUpdate = (
    residentUid: unknown,
    uid: string,
    bathRecordUpdateInputDto: BathRecordUpdateInputDto,
 ) => {
      
      
      return customInstance<BathRecordDto>(
      {url: `/residents/${residentUid}/bath-records/${uid}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: bathRecordUpdateInputDto
    },
      );
    }
  


export const getBathRecordsControllerUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: BathRecordUpdateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: BathRecordUpdateInputDto}, TContext> => {
    
const mutationKey = ['bathRecordsControllerUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bathRecordsControllerUpdate>>, {residentUid: unknown;uid: string;data: BathRecordUpdateInputDto}> = (props) => {
          const {residentUid,uid,data} = props ?? {};

          return  bathRecordsControllerUpdate(residentUid,uid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BathRecordsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof bathRecordsControllerUpdate>>>
    export type BathRecordsControllerUpdateMutationBody = BathRecordUpdateInputDto
    export type BathRecordsControllerUpdateMutationError = unknown

    /**
 * @summary 入浴記録を更新
 */
export const useBathRecordsControllerUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: BathRecordUpdateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof bathRecordsControllerUpdate>>,
        TError,
        {residentUid: unknown;uid: string;data: BathRecordUpdateInputDto},
        TContext
      > => {

      const mutationOptions = getBathRecordsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 入浴記録を削除
 */
export const bathRecordsControllerDelete = (
    residentUid: unknown,
    uid: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/residents/${residentUid}/bath-records/${uid}`, method: 'DELETE'
    },
      );
    }
  


export const getBathRecordsControllerDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext> => {
    
const mutationKey = ['bathRecordsControllerDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bathRecordsControllerDelete>>, {residentUid: unknown;uid: string}> = (props) => {
          const {residentUid,uid} = props ?? {};

          return  bathRecordsControllerDelete(residentUid,uid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BathRecordsControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof bathRecordsControllerDelete>>>
    
    export type BathRecordsControllerDeleteMutationError = unknown

    /**
 * @summary 入浴記録を削除
 */
export const useBathRecordsControllerDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bathRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof bathRecordsControllerDelete>>,
        TError,
        {residentUid: unknown;uid: string},
        TContext
      > => {

      const mutationOptions = getBathRecordsControllerDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 利用者の排泄記録一覧を取得
 */
export const eliminationRecordsControllerFindByResident = (
    residentUid: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<EliminationRecordListResponseDto>(
      {url: `/residents/${residentUid}/elimination-records`, method: 'GET', signal
    },
      );
    }
  

export const getEliminationRecordsControllerFindByResidentQueryKey = (residentUid: string,) => {
    return [`/residents/${residentUid}/elimination-records`] as const;
    }

    
export const getEliminationRecordsControllerFindByResidentQueryOptions = <TData = Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError = unknown>(residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEliminationRecordsControllerFindByResidentQueryKey(residentUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>> = ({ signal }) => eliminationRecordsControllerFindByResident(residentUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(residentUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EliminationRecordsControllerFindByResidentQueryResult = NonNullable<Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>>
export type EliminationRecordsControllerFindByResidentQueryError = unknown


export function useEliminationRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEliminationRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEliminationRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 利用者の排泄記録一覧を取得
 */

export function useEliminationRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eliminationRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEliminationRecordsControllerFindByResidentQueryOptions(residentUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary 排泄記録を作成
 */
export const eliminationRecordsControllerCreate = (
    residentUid: string,
    eliminationRecordCreateInputDto: EliminationRecordCreateInputDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<EliminationRecordDto>(
      {url: `/residents/${residentUid}/elimination-records`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eliminationRecordCreateInputDto, signal
    },
      );
    }
  


export const getEliminationRecordsControllerCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerCreate>>, TError,{residentUid: string;data: EliminationRecordCreateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerCreate>>, TError,{residentUid: string;data: EliminationRecordCreateInputDto}, TContext> => {
    
const mutationKey = ['eliminationRecordsControllerCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eliminationRecordsControllerCreate>>, {residentUid: string;data: EliminationRecordCreateInputDto}> = (props) => {
          const {residentUid,data} = props ?? {};

          return  eliminationRecordsControllerCreate(residentUid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EliminationRecordsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof eliminationRecordsControllerCreate>>>
    export type EliminationRecordsControllerCreateMutationBody = EliminationRecordCreateInputDto
    export type EliminationRecordsControllerCreateMutationError = unknown

    /**
 * @summary 排泄記録を作成
 */
export const useEliminationRecordsControllerCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerCreate>>, TError,{residentUid: string;data: EliminationRecordCreateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof eliminationRecordsControllerCreate>>,
        TError,
        {residentUid: string;data: EliminationRecordCreateInputDto},
        TContext
      > => {

      const mutationOptions = getEliminationRecordsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 排泄記録を更新
 */
export const eliminationRecordsControllerUpdate = (
    residentUid: unknown,
    uid: string,
    eliminationRecordUpdateInputDto: EliminationRecordUpdateInputDto,
 ) => {
      
      
      return customInstance<EliminationRecordDto>(
      {url: `/residents/${residentUid}/elimination-records/${uid}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: eliminationRecordUpdateInputDto
    },
      );
    }
  


export const getEliminationRecordsControllerUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: EliminationRecordUpdateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: EliminationRecordUpdateInputDto}, TContext> => {
    
const mutationKey = ['eliminationRecordsControllerUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eliminationRecordsControllerUpdate>>, {residentUid: unknown;uid: string;data: EliminationRecordUpdateInputDto}> = (props) => {
          const {residentUid,uid,data} = props ?? {};

          return  eliminationRecordsControllerUpdate(residentUid,uid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EliminationRecordsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof eliminationRecordsControllerUpdate>>>
    export type EliminationRecordsControllerUpdateMutationBody = EliminationRecordUpdateInputDto
    export type EliminationRecordsControllerUpdateMutationError = unknown

    /**
 * @summary 排泄記録を更新
 */
export const useEliminationRecordsControllerUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: EliminationRecordUpdateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof eliminationRecordsControllerUpdate>>,
        TError,
        {residentUid: unknown;uid: string;data: EliminationRecordUpdateInputDto},
        TContext
      > => {

      const mutationOptions = getEliminationRecordsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 排泄記録を削除
 */
export const eliminationRecordsControllerDelete = (
    residentUid: unknown,
    uid: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/residents/${residentUid}/elimination-records/${uid}`, method: 'DELETE'
    },
      );
    }
  


export const getEliminationRecordsControllerDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext> => {
    
const mutationKey = ['eliminationRecordsControllerDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eliminationRecordsControllerDelete>>, {residentUid: unknown;uid: string}> = (props) => {
          const {residentUid,uid} = props ?? {};

          return  eliminationRecordsControllerDelete(residentUid,uid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EliminationRecordsControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof eliminationRecordsControllerDelete>>>
    
    export type EliminationRecordsControllerDeleteMutationError = unknown

    /**
 * @summary 排泄記録を削除
 */
export const useEliminationRecordsControllerDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eliminationRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof eliminationRecordsControllerDelete>>,
        TError,
        {residentUid: unknown;uid: string},
        TContext
      > => {

      const mutationOptions = getEliminationRecordsControllerDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 利用者の日常記録一覧を取得
 */
export const dailyRecordsControllerFindByResident = (
    residentUid: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<DailyRecordListResponseDto>(
      {url: `/residents/${residentUid}/daily-records`, method: 'GET', signal
    },
      );
    }
  

export const getDailyRecordsControllerFindByResidentQueryKey = (residentUid: string,) => {
    return [`/residents/${residentUid}/daily-records`] as const;
    }

    
export const getDailyRecordsControllerFindByResidentQueryOptions = <TData = Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError = unknown>(residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDailyRecordsControllerFindByResidentQueryKey(residentUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>> = ({ signal }) => dailyRecordsControllerFindByResident(residentUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(residentUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DailyRecordsControllerFindByResidentQueryResult = NonNullable<Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>>
export type DailyRecordsControllerFindByResidentQueryError = unknown


export function useDailyRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDailyRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDailyRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 利用者の日常記録一覧を取得
 */

export function useDailyRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dailyRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDailyRecordsControllerFindByResidentQueryOptions(residentUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary 日常記録を作成
 */
export const dailyRecordsControllerCreate = (
    residentUid: string,
    dailyRecordCreateInputDto: DailyRecordCreateInputDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<DailyRecordDto>(
      {url: `/residents/${residentUid}/daily-records`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dailyRecordCreateInputDto, signal
    },
      );
    }
  


export const getDailyRecordsControllerCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerCreate>>, TError,{residentUid: string;data: DailyRecordCreateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerCreate>>, TError,{residentUid: string;data: DailyRecordCreateInputDto}, TContext> => {
    
const mutationKey = ['dailyRecordsControllerCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dailyRecordsControllerCreate>>, {residentUid: string;data: DailyRecordCreateInputDto}> = (props) => {
          const {residentUid,data} = props ?? {};

          return  dailyRecordsControllerCreate(residentUid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DailyRecordsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof dailyRecordsControllerCreate>>>
    export type DailyRecordsControllerCreateMutationBody = DailyRecordCreateInputDto
    export type DailyRecordsControllerCreateMutationError = unknown

    /**
 * @summary 日常記録を作成
 */
export const useDailyRecordsControllerCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerCreate>>, TError,{residentUid: string;data: DailyRecordCreateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dailyRecordsControllerCreate>>,
        TError,
        {residentUid: string;data: DailyRecordCreateInputDto},
        TContext
      > => {

      const mutationOptions = getDailyRecordsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 日常記録を更新
 */
export const dailyRecordsControllerUpdate = (
    residentUid: unknown,
    uid: string,
    dailyRecordUpdateInputDto: DailyRecordUpdateInputDto,
 ) => {
      
      
      return customInstance<DailyRecordDto>(
      {url: `/residents/${residentUid}/daily-records/${uid}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: dailyRecordUpdateInputDto
    },
      );
    }
  


export const getDailyRecordsControllerUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: DailyRecordUpdateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: DailyRecordUpdateInputDto}, TContext> => {
    
const mutationKey = ['dailyRecordsControllerUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dailyRecordsControllerUpdate>>, {residentUid: unknown;uid: string;data: DailyRecordUpdateInputDto}> = (props) => {
          const {residentUid,uid,data} = props ?? {};

          return  dailyRecordsControllerUpdate(residentUid,uid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DailyRecordsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof dailyRecordsControllerUpdate>>>
    export type DailyRecordsControllerUpdateMutationBody = DailyRecordUpdateInputDto
    export type DailyRecordsControllerUpdateMutationError = unknown

    /**
 * @summary 日常記録を更新
 */
export const useDailyRecordsControllerUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: DailyRecordUpdateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dailyRecordsControllerUpdate>>,
        TError,
        {residentUid: unknown;uid: string;data: DailyRecordUpdateInputDto},
        TContext
      > => {

      const mutationOptions = getDailyRecordsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 日常記録を削除
 */
export const dailyRecordsControllerDelete = (
    residentUid: unknown,
    uid: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/residents/${residentUid}/daily-records/${uid}`, method: 'DELETE'
    },
      );
    }
  


export const getDailyRecordsControllerDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext> => {
    
const mutationKey = ['dailyRecordsControllerDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dailyRecordsControllerDelete>>, {residentUid: unknown;uid: string}> = (props) => {
          const {residentUid,uid} = props ?? {};

          return  dailyRecordsControllerDelete(residentUid,uid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DailyRecordsControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof dailyRecordsControllerDelete>>>
    
    export type DailyRecordsControllerDeleteMutationError = unknown

    /**
 * @summary 日常記録を削除
 */
export const useDailyRecordsControllerDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dailyRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof dailyRecordsControllerDelete>>,
        TError,
        {residentUid: unknown;uid: string},
        TContext
      > => {

      const mutationOptions = getDailyRecordsControllerDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 利用者の飲料記録一覧を取得
 */
export const beverageRecordsControllerFindByResident = (
    residentUid: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<BeverageRecordListResponseDto>(
      {url: `/residents/${residentUid}/beverage-records`, method: 'GET', signal
    },
      );
    }
  

export const getBeverageRecordsControllerFindByResidentQueryKey = (residentUid: string,) => {
    return [`/residents/${residentUid}/beverage-records`] as const;
    }

    
export const getBeverageRecordsControllerFindByResidentQueryOptions = <TData = Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError = unknown>(residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBeverageRecordsControllerFindByResidentQueryKey(residentUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>> = ({ signal }) => beverageRecordsControllerFindByResident(residentUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(residentUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BeverageRecordsControllerFindByResidentQueryResult = NonNullable<Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>>
export type BeverageRecordsControllerFindByResidentQueryError = unknown


export function useBeverageRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBeverageRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>,
          TError,
          Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBeverageRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 利用者の飲料記録一覧を取得
 */

export function useBeverageRecordsControllerFindByResident<TData = Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError = unknown>(
 residentUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof beverageRecordsControllerFindByResident>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBeverageRecordsControllerFindByResidentQueryOptions(residentUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary 飲料記録を作成
 */
export const beverageRecordsControllerCreate = (
    residentUid: string,
    beverageRecordCreateInputDto: BeverageRecordCreateInputDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<BeverageRecordDto>(
      {url: `/residents/${residentUid}/beverage-records`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: beverageRecordCreateInputDto, signal
    },
      );
    }
  


export const getBeverageRecordsControllerCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerCreate>>, TError,{residentUid: string;data: BeverageRecordCreateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerCreate>>, TError,{residentUid: string;data: BeverageRecordCreateInputDto}, TContext> => {
    
const mutationKey = ['beverageRecordsControllerCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof beverageRecordsControllerCreate>>, {residentUid: string;data: BeverageRecordCreateInputDto}> = (props) => {
          const {residentUid,data} = props ?? {};

          return  beverageRecordsControllerCreate(residentUid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BeverageRecordsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof beverageRecordsControllerCreate>>>
    export type BeverageRecordsControllerCreateMutationBody = BeverageRecordCreateInputDto
    export type BeverageRecordsControllerCreateMutationError = unknown

    /**
 * @summary 飲料記録を作成
 */
export const useBeverageRecordsControllerCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerCreate>>, TError,{residentUid: string;data: BeverageRecordCreateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof beverageRecordsControllerCreate>>,
        TError,
        {residentUid: string;data: BeverageRecordCreateInputDto},
        TContext
      > => {

      const mutationOptions = getBeverageRecordsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 飲料記録を更新
 */
export const beverageRecordsControllerUpdate = (
    residentUid: unknown,
    uid: string,
    beverageRecordUpdateInputDto: BeverageRecordUpdateInputDto,
 ) => {
      
      
      return customInstance<BeverageRecordDto>(
      {url: `/residents/${residentUid}/beverage-records/${uid}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: beverageRecordUpdateInputDto
    },
      );
    }
  


export const getBeverageRecordsControllerUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: BeverageRecordUpdateInputDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: BeverageRecordUpdateInputDto}, TContext> => {
    
const mutationKey = ['beverageRecordsControllerUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof beverageRecordsControllerUpdate>>, {residentUid: unknown;uid: string;data: BeverageRecordUpdateInputDto}> = (props) => {
          const {residentUid,uid,data} = props ?? {};

          return  beverageRecordsControllerUpdate(residentUid,uid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BeverageRecordsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof beverageRecordsControllerUpdate>>>
    export type BeverageRecordsControllerUpdateMutationBody = BeverageRecordUpdateInputDto
    export type BeverageRecordsControllerUpdateMutationError = unknown

    /**
 * @summary 飲料記録を更新
 */
export const useBeverageRecordsControllerUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerUpdate>>, TError,{residentUid: unknown;uid: string;data: BeverageRecordUpdateInputDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof beverageRecordsControllerUpdate>>,
        TError,
        {residentUid: unknown;uid: string;data: BeverageRecordUpdateInputDto},
        TContext
      > => {

      const mutationOptions = getBeverageRecordsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary 飲料記録を削除
 */
export const beverageRecordsControllerDelete = (
    residentUid: unknown,
    uid: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/residents/${residentUid}/beverage-records/${uid}`, method: 'DELETE'
    },
      );
    }
  


export const getBeverageRecordsControllerDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext> => {
    
const mutationKey = ['beverageRecordsControllerDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof beverageRecordsControllerDelete>>, {residentUid: unknown;uid: string}> = (props) => {
          const {residentUid,uid} = props ?? {};

          return  beverageRecordsControllerDelete(residentUid,uid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BeverageRecordsControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof beverageRecordsControllerDelete>>>
    
    export type BeverageRecordsControllerDeleteMutationError = unknown

    /**
 * @summary 飲料記録を削除
 */
export const useBeverageRecordsControllerDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof beverageRecordsControllerDelete>>, TError,{residentUid: unknown;uid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof beverageRecordsControllerDelete>>,
        TError,
        {residentUid: unknown;uid: string},
        TContext
      > => {

      const mutationOptions = getBeverageRecordsControllerDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
